#!/bin/sh

cd ./code/

export DEST=$OUTPUTDIR/python2
export DEPS=$OUTPUTDIR/python2deps
export CFLAGS="$CFLAGS -Os -fPIC -ffunction-sections -fdata-sections"
export LDFLAGS="$LDFLAGS -Wl,--gc-sections"

if [ ! -f $CWD/code/.makezlib ]; then
echo ">>>   MAKE zlib"
sleep 3
if [ ! -f ../dl/zlib-1.2.8.tar.gz ]; then
    wget -O ../dl/zlib-1.2.8.tar.gz http://zlib.net/zlib-1.2.8.tar.gz
fi
tar zxf ../dl/zlib-1.2.8.tar.gz
cd zlib-1.2.8/
./configure --prefix=$DEPS --static
make clean && make && make install
cd ..
touch $CWD/code/.makezlib
fi

if [ ! -f $CWD/code/.makebzip ]; then
echo ">>>   MAKE bzip"
sleep 3
if [ ! -f ../dl/bzip2-1.0.6.tar.gz ]; then
    wget -P ../dl/ http://bzip.org/1.0.6/bzip2-1.0.6.tar.gz
fi
tar zxf ../dl/bzip2-1.0.6.tar.gz
cd bzip2-1.0.6/
sed -i -e "s/all: libbz2.a bzip2 bzip2recover test/all: libbz2.a bzip2 bzip2recover/" Makefile
make clean
make CC=$CC AR=$AR RANLIB=$RANLIB CFLAGS="$CFLAGS -Wall -D_FILE_OFFSET_BITS=64"
make install PREFIX=$DEPS
cd ..
touch $CWD/code/.makebzip
fi

if [ ! -f $CWD/code/.makeopenssl ]; then
echo ">>>   MAKE openssl"
sleep 3
if [ ! -f ../dl/openssl-1.0.1e.tar.gz ]; then
    wget -O ../dl/openssl-1.0.1e.tar.gz http://www.openssl.org/source/openssl-1.0.1e.tar.gz
fi
tar zxf ../dl/openssl-1.0.1e.tar.gz
cd openssl-1.0.1e/
./Configure --prefix=$DEPS --openssldir=$DEST/etc/ssl --with-zlib-include=$DEPS/include --with-zlib-lib=$DEPS/lib no-shared no-zlib-dynamic threads linux-armv4 -DL_ENDIAN $CFLAGS $LDFLAGS
make -j1 clean && make -j1 && make -j1 install_sw
cd ..
touch $CWD/code/.makeopenssl
fi

if [ ! -f $CWD/code/.makencurses ]; then
echo ">>>   MAKE ncurses"
sleep 3
if [ ! -f ../dl/ncurses-5.9.tar.gz ]; then
    wget -O ../dl/ncurses-5.9.tar.gz http://ftp.gnu.org/gnu/ncurses/ncurses-5.9.tar.gz
fi
tar zxf ../dl/ncurses-5.9.tar.gz
cd ncurses-5.9/
./configure --host=$CHOST --prefix=$DEPS --without-shared
make clean && make && make install
cd ..
touch $CWD/code/.makencurses
fi

if [ ! -f $CWD/code/.makesqlite ]; then
echo ">>>   MAKE sqlite"
sleep 3
if [ ! -f ../dl/sqlite-autoconf-3080000.tar.gz ]; then
    wget -O ../dl/sqlite-autoconf-3080000.tar.gz http://sqlite.org/2013/sqlite-autoconf-3080000.tar.gz
fi
tar zxf ../dl/sqlite-autoconf-3080000.tar.gz
cd sqlite-autoconf-3080000/
./configure --host=$CHOST --prefix=$DEPS --disable-shared
make clean && make && make install
cd ..
touch $CWD/code/.makesqlite
fi

if [ ! -f $CWD/code/.makelibffi ]; then
echo ">>>   MAKE libffi"
sleep 3
if [ ! -f ../dl/libffi-3.0.13.tar.gz ]; then
    wget -O ../dl/libffi-3.0.13.tar.gz ftp://sourceware.org/pub/libffi/libffi-3.0.13.tar.gz
fi
tar zxf ../dl/libffi-3.0.13.tar.gz
cd libffi-3.0.13/
./configure --host=$CHOST --prefix=$DEPS --disable-shared
make clean && make && make install
cd ..
touch $CWD/code/.makelibffi
fi

if [ ! -f $CWD/code/.Python ]; then
echo ">>>   MAKE Python"
sleep 3
if [ ! -f ../dl/Python-2.7.5.tgz ]; then
    wget -O ../dl/Python-2.7.5.tgz http://python.org/ftp/python/2.7.5/Python-2.7.5.tgz
fi
tar zxf ../dl/Python-2.7.5.tgz
cp -r Python-2.7.5 Python-2.7.5-native
touch $CWD/code/.Python
fi

if [ ! -f $CWD/code/.makePython-native ]; then
echo ">>>   MAKE Python-native"
sleep 3
. $CWD/config/uncrosscompile.sh
cd Python-2.7.5-native/
./configure
make clean && make
cd $CWD
touch $CWD/code/.makePython-native
fi

if [ ! -f $CWD/code/.Python-host ]; then
echo ">>>   Copy host Python"
sleep 3
. $CWD/config/armv7l
sleep 3
cd ./code
cd Python-2.7.5/
cp ../Python-2.7.5-native/python hostpython

echo ">>>   Patch Python"
sleep 3
cat << "EOF" > setup.py.patch
--- setup.py	2013-08-29 14:31:11.832332630 +0200
+++ setup.py	2013-08-29 16:22:10.927321387 +0200
@@ -437,10 +439,11 @@
 
     def detect_modules(self):
         # Ensure that /usr/local is always used
-        add_dir_to_list(self.compiler.library_dirs, '/usr/local/lib')
-        add_dir_to_list(self.compiler.include_dirs, '/usr/local/include')
-        self.add_gcc_paths()
-        self.add_multiarch_paths()
+        if not cross_compiling:
+                add_dir_to_list(self.compiler.library_dirs, '/usr/local/lib')
+                add_dir_to_list(self.compiler.include_dirs, '/usr/local/include')
+                self.add_gcc_paths()
+                self.add_multiarch_paths()
 
         # Add paths specified in the environment variables LDFLAGS and
         # CPPFLAGS for header and library files.
@@ -477,7 +480,8 @@
                         add_dir_to_list(dir_list, directory)
 
         if os.path.normpath(sys.prefix) != '/usr' \
-                and not sysconfig.get_config_var('PYTHONFRAMEWORK'):
+                and not sysconfig.get_config_var('PYTHONFRAMEWORK') \
+                and not cross_compiling:
             # OSX note: Don't add LIBDIR and INCLUDEDIR to building a framework
             # (PYTHONFRAMEWORK is set) to avoid # linking problems when
             # building a framework with different architectures than
@@ -768,10 +772,10 @@
 
         # crypt module.
 
-        if self.compiler.find_library_file(lib_dirs, 'crypt'):
-            libs = ['crypt']
-        else:
-            libs = []
+        #if self.compiler.find_library_file(lib_dirs, 'crypt'):
+        libs = ['crypt']
+        #else:
+        #    libs = []
         exts.append( Extension('crypt', ['cryptmodule.c'], libraries=libs) )
 
         # CSV files
@@ -1975,8 +1979,14 @@
 
                 # Pass empty CFLAGS because we'll just append the resulting
                 # CFLAGS to Python's; -g or -O2 is to be avoided.
-                cmd = "cd %s && env CFLAGS='' '%s/configure' %s" \
-                      % (ffi_builddir, ffi_srcdir, " ".join(config_args))
+                if cross_compiling:
+                    cmd = "cd %s && env CFLAGS='' %s/configure --host=%s %s" \
+                          % (ffi_builddir, ffi_srcdir,
+                             os.environ.get('HOSTARCH'),
+                             " ".join(config_args))
+                else:
+                    cmd = "cd %s && env CFLAGS='' '%s/configure' %s" \
+                          % (ffi_builddir, ffi_srcdir, " ".join(config_args))
 
                 res = os.system(cmd)
                 if res or not os.path.exists(ffi_configfile):
EOF

patch setup.py setup.py.patch

export _PYTHON_HOST_PLATFORM="linux-armv7l"
export PKG_CONFIG_LIBDIR=$DEPS/lib/pkgconfig

./configure --host=$CHOST --build=i686 --prefix=$DEST --enable-shared --with-system-ffi PYTHON_FOR_BUILD="$CWD/code/Python-2.7.5/hostpython" CPPFLAGS="-I$DEPS/include -I$DEPS/include/ncurses -I$TOOLCHAIN/$CHOST/libc/usr/include" LDFLAGS="$LDFLAGS -L$DEPS/lib -L$TOOLCHAIN/$CHOST/libc/lib -Wl,-rpath,$DEST/lib" ac_cv_have_long_long_format=yes ac_cv_buggy_getaddrinfo=no ac_cv_file__dev_ptmx=yes ac_cv_file__dev_ptc=no
make clean && make
cp ../Python-2.7.5-native/Parser/pgen ./Parser/pgen
echo
echo ">>>   Hocking up the Python Cross-compile environment"
echo "       (You may see some errors, this is normal...)"
echo
make > ../Python_Cross-compile
make install PYTHON_FOR_BUILD="$CWD/code/Python-2.7.5-native/python"
find $DEST -name "test" -exec rm -fr "{}" \;
find $DEST -name "tests" -exec rm -fr "{}" \;
$STRIP -s -R .comment -R .note -R .note.ABI-tag $DEST/bin/python2.7
chmod u+w $DEST/lib/libpython2.7.so.1.0
$STRIP -s -R .comment -R .note -R .note.ABI-tag $DEST/lib/libpython2.7.so.1.0
chmod u-w $DEST/lib/libpython2.7.so.1.0
$STRIP -s -R .comment -R .note -R .note.ABI-tag $DEST/lib/python2.7/lib-dynload/*.so
touch $CWD/code/.Python-host
fi
echo
echo "##########################################"
echo "+++   Python build environment ready   +++"
echo "##########################################"
sleep 3
